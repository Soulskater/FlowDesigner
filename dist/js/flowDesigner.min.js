angular.module("FlowDesigner",["Svg.Directive","Touch.Directive","Common.Directive"]).constant("types",{text:"Text",bool:"Bool",number:"Number"}).constant("status",{notrun:"notrun",running:"running",failed:"failed",succeeded:"succeeded"}).constant("direction",{input:"input",output:"output"}).directive("designer",["$timeout","FlowDesigner.PathService",function(e,t){return{restrict:"AE",transclude:!1,replace:!0,templateUrl:t.templatesBaseUrl+"designer.tmpl.html",scope:{autoSize:"=",items:"=",selectedChanged:"&",sizeChanged:"="},controller:"designerCtrl",link:function(e,t){var n=function(){e.size={width:t.width(),height:t.height()}},i=function(){e.offset={x:t.offset().left,y:t.offset().top}};n(),i();new ResizeSensor($(t).parent().parent(),function(){n(),i()})}}}]),angular.module("Common.Directive",[]).directive("ngMousewheel",[function(){return{restrict:"A",require:"?ngModel",replace:!0,scope:!1,link:function(e,t,n){t.mousewheel(function(t){e.$apply(function(){e.$eval(n.ngMousewheel,{event:t})})})}}}]),angular.module("FlowDesigner").controller("connectorCtrl",["$scope","types","direction",function(e,t,n){e.$direction=n,e.newReference=null,e.selectedReference=null,e.hasReference=function(){return e.property.Direction===n.input?null!==e.property.Reference:null!==e.property.References&&0!==e.property.References.length},e.setStyle=function(){return{string:e.property.PropertyValueType===t.string,bool:e.property.PropertyValueType===t.bool,number:e.property.PropertyValueType===t.number,"no-value":!(e.hasReference()||e.property.Value&&""!==e.property.Value)}},e.selectReference=function(t){e.selectedReference=t},e.drag=function(e){r(e.clientX,e.clientY),e.stopPropagation()},e.dragStart=function(e){r(e.clientX,e.clientY),e.stopPropagation()},e.dragEnd=function(t){var n=$(t.target)[0].getAttribute("data-item-id"),r=$(t.target)[0].getAttribute("data-property-name");if(!n||!r)return void(e.newReference=null);var o=e.designer.getItem(n),c=e.designer.getProperty(o,r);return c.Direction===e.property.Direction||n===e.itemData.Id?void(e.newReference=null):(i(e.property,c,o),e.newReference=null,void t.stopPropagation())};var i=function(t,i,r){t.Direction===n.input?(t.Reference={TaskId:r.Id,ReferencedProperty:i.PropertyName},i.References.push({TaskId:e.itemData.Id,ReferencedProperty:e.property.PropertyName})):(i.Reference={TaskId:e.itemData.Id,ReferencedProperty:e.property.PropertyName},t.References.push({TaskId:r.Id,ReferencedProperty:i.PropertyName}))},r=function(t,n){e.newReference={x:(t-e.designer.getOffset().x)*(1/e.designer.getScale().x)+e.designer.getViewBox().x-1,y:(n-e.designer.getOffset().y)*(1/e.designer.getScale().y)+e.designer.getViewBox().y-1}};e.$on("$destroy",function(){})}]),angular.module("FlowDesigner").directive("connector",["types","direction","FlowDesigner.PathService",function(e,t,n){return{restrict:"AE",replace:!0,require:"^designer",templateUrl:n.templatesBaseUrl+"connector.tmpl.html",controller:"connectorCtrl",scope:{itemData:"=",property:"=",index:"=",offset:"="},link:function(e,n,i,r){e.designer=r,e.property.calculatePosition=function(){var n=e.property.Direction===t.input?e.itemData.InputProperties:e.itemData.OutputProperties;return{x:e.property.Direction===t.input?e.itemData.Position.X:e.itemData.Position.X+250,y:e.itemData.Position.Y+e.offset+(170-e.offset)/(n.length+1)*(e.index+1)}},e.property.removeReference=function(n,i){var r=e.designer.getItem(n),o=e.designer.getProperty(r,i);if(e.property.Direction===t.input){if(null===e.property.Reference)return;e.property.Reference=null}else{if(0===e.property.References.length)return;linq(e.property.References).remove(function(e){return e.TaskId===n&&e.ReferencedProperty===i})}o.removeReference(e.itemData.Id,e.property.PropertyName)};var o=angular.element(n.children());n.replaceWith(o)}}}]),angular.module("FlowDesigner").controller("designerCtrl",["$scope","direction",function(e){function t(){e.viewBox.width=e.size.width/e.scale.x,e.viewBox.height=e.size.height/e.scale.y}var n=this;e.size={width:0,height:0},e.scale={x:1,y:1},e.viewBox={x:0,y:0,width:0,height:0},e.moving=!1,this.getScale=function(){return e.scale},this.getOffset=function(){return{x:e.offset.x,y:e.offset.y}},this.getViewBox=function(){return e.viewBox},this.getItem=function(t){return linq(e.items).first(function(e){return e.Id===t})},this.getProperty=function(e,t){var n=linq(e.InputProperties).firstOrDefault(function(e){return e.PropertyName===t});return n?n:linq(e.OutputProperties).firstOrDefault(function(e){return e.PropertyName===t})},this.getReferencedProperty=function(e){var t=n.getItem(e.TaskId),i=n.getProperty(t,e.ReferencedProperty);return i},this.selectItem=function(t){linq(e.items).forEach(function(e){e.selected=!1}),t.selected=!0,e.selectedChanged({item:t})},this.removeItem=function(t){linq(t.InputProperties).forEach(function(e){e.Reference&&e.removeReference(e.Reference.TaskId,e.Reference.ReferencedProperty)}),linq(t.OutputProperties).forEach(function(e){linq(e.References).forEach(function(t){e.removeReference(t.TaskId,t.ReferencedProperty)})}),linq(e.items).remove(t)},e.onMouseWheel=function(t){var n=.1;if(-1===t.deltaY){if(e.scale.x-n<=0||e.scale.y-n<=0)return;e.scale.x-=n,e.scale.y-=n}1===t.deltaY&&(e.scale.x+=n,e.scale.y+=n),t.preventDefault()};var i,r=e.$watch("size",t,!0),o=e.$watch("scale",t,!0),c=0;e.moveStart=function(t){i=t.clientX,c=t.clientY,e.moving=!0},e.move=function(t){var n=t.clientX,r=t.clientY;e.viewBox.x-=(n-i)*(1/e.scale.x),e.viewBox.y-=(r-c)*(1/e.scale.y),i=n,c=r},e.moveEnd=function(){e.moving=!1},e.$on("$destroy",function(){r(),o()})}]),angular.module("FlowDesigner").controller("itemCtrl",["$scope","types","status",function(e,t,n){e.$status=n,e.$types=t,e.width=250,e.height=170,e.dragging=!1;var i,r=0;e.dragStart=function(e){i=e.clientX,r=e.clientY,e.stopPropagation()},e.drag=function(t){e.dragging=!0;var n=t.clientX,o=t.clientY;e.data.Position.X+=(n-i)*(1/e.designer.getScale().x),e.data.Position.Y+=(o-r)*(1/e.designer.getScale().y),i=n,r=o,t.stopPropagation()},e.dragEnd=function(){e.dragging=!1},e.onItemClick=function(){e.designer.selectItem(e.data)}}]).directive("designerItem",["types","status","FlowDesigner.PathService",function(e,t,n){return{restrict:"AE",require:"^designer",replace:!0,templateUrl:n.templatesBaseUrl+"item.tmpl.html",transclude:!0,scope:{data:"=",offsetX:"=",offsetY:"="},controller:"itemCtrl",link:function(e,n,i,r){e.data.Status=t.notrun,e.designer=r;var o=angular.element(n.children());n.replaceWith(o)}}}]).directive("itemTitle",[function(){return{restrict:"E",replace:!0,template:'<div class="font-m box-header" ng-transclude></div>',transclude:!0,link:function(){}}}]).directive("itemDescription",[function(){return{restrict:"AE",replace:!0,template:'<div class="font-xs" ng-transclude></div>',transclude:!0,link:function(){}}}]);var scripts=document.getElementsByTagName("script"),currentScriptPath=scripts[scripts.length-1].src,flowDesignerRootPath=currentScriptPath.split("js/")[0];angular.module("FlowDesigner").service("FlowDesigner.PathService",[function(){return{templatesBaseUrl:flowDesignerRootPath+"templates/"}}]),angular.module("Svg.Directive",[]).directive("ngWidth",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngWidth,function(e){t.attr("width",e)})}}}]).directive("ngHeight",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngHeight,function(e){t.attr("height",e)})}}}]).directive("ngX",["$compile",function(){return{restrict:"A",link:function(e,t,n){e.$watch(n.ngX,function(e){t.attr("x",e)})}}}]).directive("ngY",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY,function(e){t.attr("y",e)})}}}]).directive("ngCx",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngCx,function(e){t.attr("cx",e)})}}}]).directive("ngCy",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngCy,function(e){t.attr("cy",e)})}}}]).directive("ngX1",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngX1,function(e){t.attr("x1",e)})}}}]).directive("ngX2",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngX2,function(e){t.attr("x2",e)})}}}]).directive("ngY1",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY1,function(e){t.attr("y1",e)})}}}]).directive("ngY2",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY2,function(e){t.attr("y2",e)})}}}]).directive("autoSize",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t){$(window).resize(function(){e.$apply(function(){e.size={width:t.width(),height:t.height()}})})}}}]).directive("ngViewbox",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngViewbox,function(e){if(e){var n=e.x+" "+e.y+" "+e.width+" "+e.height;t[0].setAttribute("viewBox",n)}},!0)}}}]).directive("textEllipsis",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){var i=parseFloat(n.maxWidth),r=e.$eval(n.textEllipsis);if(t.text(r),t.width()>i)for(;t.width()>i;)r=r.substring(0,r.length-1),t.text(r.substring(0,r.length-1)+"...")}}}]),angular.module("Touch.Directive",[]).directive("tap",function(){return{restrict:"A",replace:!0,link:function(e,t,n){var i;t.bind("mousedown",function(){i=new Date}),t.bind("mouseup",function(t){var r=new Date;200>=r-i&&e.$apply(function(){e.$eval(n.tap,{$event:t})})}),e.$on("$destroy",function(){t.unbind("mousedown"),t.unbind("mouseup")})}}}).directive("doubleTap",function(){return{restrict:"A",replace:!0,link:function(e,t,n){t.hammer({taps:2}).bind("tap",function(t){2===t.gesture.tapCount&&e.$apply(function(){e.$eval(n.doubleTap,{$event:t})})}),e.$on("$destroy",function(){t.hammer().unbind("tap")})}}}).directive("pan",function(){return{restrict:"A",replace:!0,link:function(e,t,n){t.bind("mousedown",function(t){0===t.button&&e.$apply(function(){e.$eval(n.panBegin,{$event:t});var i=function(t){e.$apply(function(){e.$eval(n.pan,{$event:t})})};$(document).bind("mousemove",i);var r=function(t){e.$apply(function(){e.$eval(n.panRelease,{$event:t}),$(document).unbind("mousemove",i),$(document).unbind("mouseup",r)})};$(document).bind("mouseup",r)})}),e.$on("$destroy",function(){t.unbind("mousedown")})}}}),function(){function e(){t.instance=new t,t.instance.init(t.withTracking)}var t=this.ElementQueries=function(){function e(e){e||(e=document.documentElement);var t=getComputedStyle(e,"fontSize");return parseFloat(t)||16}function n(t,n){var i=n.replace(/[0-9]*/,"");switch(n=parseFloat(n),i){case"px":return n;case"em":return n*e(t);case"rem":return n*e();case"vw":return n*document.documentElement.clientWidth/100;case"vh":return n*document.documentElement.clientHeight/100;case"vmin":case"vmax":var r=document.documentElement.clientWidth/100,o=document.documentElement.clientHeight/100,c=Math["vmin"===i?"min":"max"];return n*c(r,o);default:return n}}function i(e){this.element=e,this.options={};var t,i,r,o,c,s,a,u=0,l=0;this.addOption=function(e){var t=[e.mode,e.property,e.value].join(",");this.options[t]=e};var d=["min-width","min-height","max-width","max-height"];this.call=function(){u=this.element.offsetWidth,l=this.element.offsetHeight,c={};for(t in this.options)this.options.hasOwnProperty(t)&&(i=this.options[t],r=n(this.element,i.value),o="width"==i.property?u:l,a=i.mode+"-"+i.property,s="","min"==i.mode&&o>=r&&(s+=i.value),"max"==i.mode&&r>=o&&(s+=i.value),c[a]||(c[a]=""),s&&-1===(" "+c[a]+" ").indexOf(" "+s+" ")&&(c[a]+=" "+s));for(var e in d)c[d[e]]?this.element.setAttribute(d[e],c[d[e]].substr(1)):this.element.removeAttribute(d[e])}}function r(e,t){e.elementQueriesSetupInformation?e.elementQueriesSetupInformation.addOption(t):(e.elementQueriesSetupInformation=new i(e),e.elementQueriesSetupInformation.addOption(t),e.elementQueriesSensor=new ResizeSensor(e,function(){e.elementQueriesSetupInformation.call()})),e.elementQueriesSetupInformation.call(),this.withTracking&&a.push(e)}function o(e,t,n,i){var o;if(document.querySelectorAll&&(o=document.querySelectorAll.bind(document)),o||"undefined"==typeof $$||(o=$$),o||"undefined"==typeof jQuery||(o=jQuery),!o)throw"No document.querySelectorAll, jQuery or Mootools's $$ found.";for(var c=o(e),s=0,a=c.length;a>s;s++)r(c[s],{mode:t,property:n,value:i})}function c(e){var t;for(e=e.replace(/'/g,'"');null!==(t=u.exec(e));)5<t.length&&o(t[1]||t[5],t[2],t[3],t[4])}function s(e){var t="";if(e)if("string"==typeof e)e=e.toLowerCase(),(-1!==e.indexOf("min-width")||-1!==e.indexOf("max-width"))&&c(e);else for(var n=0,i=e.length;i>n;n++)1===e[n].type?(t=e[n].selectorText||e[n].cssText,-1!==t.indexOf("min-height")||-1!==t.indexOf("max-height")?c(t):(-1!==t.indexOf("min-width")||-1!==t.indexOf("max-width"))&&c(t)):4===e[n].type&&s(e[n].cssRules||e[n].rules)}this.withTracking=!1;var a=[],u=/,?([^,\n]*)\[[\s\t]*(min|max)-(width|height)[\s\t]*[~$\^]?=[\s\t]*"([^"]*)"[\s\t]*]([^\n\s\{]*)/gim;this.init=function(e){this.withTracking=e;for(var t=0,n=document.styleSheets.length;n>t;t++)s(document.styleSheets[t].cssText||document.styleSheets[t].cssRules||document.styleSheets[t].rules)},this.update=function(e){this.withTracking=e,this.init()},this.detach=function(){if(!this.withTracking)throw"withTracking is not enabled. We can not detach elements since we don not store it.Use ElementQueries.withTracking = true; before domready.";for(var e;e=a.pop();)t.detach(e);a=[]}};t.update=function(e){t.instance.update(e)},t.detach=function(e){e.elementQueriesSetupInformation?(e.elementQueriesSensor.detach(),delete e.elementQueriesSetupInformation,delete e.elementQueriesSensor,console.log("detached")):console.log("detached already",e)},t.withTracking=!1,window.addEventListener?window.addEventListener("load",e,!1):window.attachEvent("onload",e)}(),function(){this.ResizeSensor=function(e,t){function n(){this.q=[],this.add=function(e){this.q.push(e)};var e,t;this.call=function(){for(e=0,t=this.q.length;t>e;e++)this.q[e].call()}}function i(e,t){return e.currentStyle?e.currentStyle[t]:window.getComputedStyle?window.getComputedStyle(e,null).getPropertyValue(t):e.style[t]}function r(e,t){if(e.resizedAttached){if(e.resizedAttached)return void e.resizedAttached.add(t)}else e.resizedAttached=new n,e.resizedAttached.add(t);e.resizeSensor=document.createElement("div"),e.resizeSensor.className="resize-sensor";var r="position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;",o="position: absolute; left: 0; top: 0;";e.resizeSensor.style.cssText=r,e.resizeSensor.innerHTML='<div class="resize-sensor-expand" style="'+r+'"><div style="'+o+'"></div></div><div class="resize-sensor-shrink" style="'+r+'"><div style="'+o+' width: 200%; height: 200%"></div></div>',e.appendChild(e.resizeSensor),{fixed:1,absolute:1}[i(e,"position")]||(e.style.position="relative");var c,s,a=e.resizeSensor.childNodes[0],u=a.childNodes[0],l=e.resizeSensor.childNodes[1],d=(l.childNodes[0],function(){u.style.width=a.offsetWidth+10+"px",u.style.height=a.offsetHeight+10+"px",a.scrollLeft=a.scrollWidth,a.scrollTop=a.scrollHeight,l.scrollLeft=l.scrollWidth,l.scrollTop=l.scrollHeight,c=e.offsetWidth,s=e.offsetHeight});d();var f=function(){e.resizedAttached&&e.resizedAttached.call()},p=function(e,t,n){e.attachEvent?e.attachEvent("on"+t,n):e.addEventListener(t,n)};p(a,"scroll",function(){(e.offsetWidth>c||e.offsetHeight>s)&&f(),d()}),p(l,"scroll",function(){(e.offsetWidth<c||e.offsetHeight<s)&&f(),d()})}if("[object Array]"===Object.prototype.toString.call(e)||"undefined"!=typeof jQuery&&e instanceof jQuery||"undefined"!=typeof Elements&&e instanceof Elements)for(var o=0,c=e.length;c>o;o++)r(e[o],t);else r(e,t);this.detach=function(){ResizeSensor.detach(e)}},this.ResizeSensor.detach=function(e){e.resizeSensor&&(e.removeChild(e.resizeSensor),delete e.resizeSensor,delete e.resizedAttached)}}();
//# sourceMappingURL=data:application/json;base64,