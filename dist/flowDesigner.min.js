angular.module("FlowDesigner",["Svg.Directive","Touch.Directive","Common.Directive"]).constant("types",{text:"Text",bool:"Bool","int":"Number"}).constant("status",{notrun:"notrun",running:"running",failed:"failed",succeeded:"succeeded"}).constant("direction",{input:"input",output:"output"}).directive("designer",["$timeout","pathService",function(e,t){return{restrict:"AE",transclude:!1,replace:!0,templateUrl:t+"designer.tmpl.html",scope:{autoSize:"=",items:"=",selectedChanged:"&"},controller:"designerCtrl",link:function(e,t){e.size={width:t.width(),height:t.height()},e.offset={x:t.offset().left,y:t.offset().top}}}}]),angular.module("Common.Directive",[]).directive("ngMousewheel",[function(){return{restrict:"A",require:"?ngModel",replace:!0,scope:!1,link:function(e,t,n){t.mousewheel(function(t){e.$apply(function(){e.$eval(n.ngMousewheel,{event:t})})})}}}]),angular.module("FlowDesigner").controller("connectorCtrl",["$scope","types","direction",function(e,t,n){e.$direction=n,e.newReference=null,e.selectedReference=null,e.hasReference=function(){return e.property.Direction===n.input?null!==e.property.Reference:0!==e.property.References.length},e.setStyle=function(){return{string:e.property.PropertyValueType===t.string,bool:e.property.PropertyValueType===t.bool,number:e.property.PropertyValueType===t.int,"no-value":!(e.hasReference()||e.property.Value&&""!==e.property.Value)}},e.selectReference=function(t){e.selectedReference=t},e.drag=function(e){i(e.clientX,e.clientY),e.stopPropagation()},e.dragStart=function(e){i(e.clientX,e.clientY),e.stopPropagation()},e.dragEnd=function(t){var n=$(t.target)[0].getAttribute("data-item-id"),i=$(t.target)[0].getAttribute("data-property-name");if(!n||!i)return void(e.newReference=null);var o=e.designer.getItem(n),c=e.designer.getProperty(o,i);return c.Direction===e.property.Direction||n===e.itemData.Id?void(e.newReference=null):(r(e.property,c,o),e.newReference=null,void t.stopPropagation())};var r=function(t,r,i){t.Direction===n.input?(t.Reference={TaskId:i.Id,ReferencedProperty:r.PropertyName},r.References.push({TaskId:e.itemData.Id,ReferencedProperty:e.property.PropertyName})):(r.Reference={TaskId:e.itemData.Id,ReferencedProperty:e.property.PropertyName},t.References.push({TaskId:i.Id,ReferencedProperty:r.PropertyName}))},i=function(t,n){e.newReference={x:(t-e.designer.getOffset().x)*(1/e.designer.getScale().x)+e.designer.getViewBox().x-1,y:(n-e.designer.getOffset().y)*(1/e.designer.getScale().y)+e.designer.getViewBox().y-1}};e.$on("$destroy",function(){})}]),angular.module("FlowDesigner").directive("connector",["types","direction","pathService",function(e,t,n){return{restrict:"AE",replace:!0,require:"^designer",templateUrl:n+"connector.tmpl.html",controller:"connectorCtrl",scope:{itemData:"=",property:"=",index:"=",offset:"="},link:function(e,n,r,i){e.designer=i,e.property.calculatePosition=function(){var n=e.property.Direction===t.input?e.itemData.InputProperties:e.itemData.OutputProperties;return{x:e.property.Direction===t.input?e.itemData.Position.X:e.itemData.Position.X+250,y:e.itemData.Position.Y+e.offset+(170-e.offset)/(n.length+1)*(e.index+1)}},e.property.removeReference=function(n,r){var i=e.designer.getItem(n),o=e.designer.getProperty(i,r);if(e.property.Direction===t.input){if(null===e.property.Reference)return;e.property.Reference=null}else{if(0===e.property.References.length)return;linq(e.property.References).remove(function(e){return e.TaskId===n&&e.ReferencedProperty===r})}o.removeReference(e.itemData.Id,e.property.PropertyName)};var o=angular.element(n.children());n.replaceWith(o)}}}]),angular.module("FlowDesigner").controller("designerCtrl",["$scope","direction",function(e){function t(){e.viewBox.width=e.size.width/e.scale.x,e.viewBox.height=e.size.height/e.scale.y}var n=this;e.size={width:0,height:0},e.scale={x:1,y:1},e.viewBox={x:0,y:0,width:0,height:0},e.moving=!1,this.getScale=function(){return e.scale},this.getOffset=function(){return{x:e.offset.x,y:e.offset.y}},this.getViewBox=function(){return e.viewBox},this.getItem=function(t){return linq(e.items).first(function(e){return e.Id===t})},this.getProperty=function(e,t){var n=linq(e.InputProperties).firstOrDefault(function(e){return e.PropertyName===t});return n?n:linq(e.OutputProperties).firstOrDefault(function(e){return e.PropertyName===t})},this.getReferencedProperty=function(e){var t=n.getItem(e.TaskId),r=n.getProperty(t,e.ReferencedProperty);return r},this.selectItem=function(t){linq(e.items).forEach(function(e){e.selected=!1}),t.selected=!0,e.selectedChanged({item:t})},this.removeItem=function(t){linq(t.InputProperties).forEach(function(e){e.Reference&&e.removeReference(e.Reference.TaskId,e.Reference.ReferencedProperty)}),linq(t.OutputProperties).forEach(function(e){linq(e.References).forEach(function(t){e.removeReference(t.TaskId,t.ReferencedProperty)})}),linq(e.items).remove(t)},e.onMouseWheel=function(t){var n=.1;if(-1===t.deltaY){if(e.scale.x-n<=0||e.scale.y-n<=0)return;e.scale.x-=n,e.scale.y-=n}1===t.deltaY&&(e.scale.x+=n,e.scale.y+=n),t.preventDefault()};var r,i=e.$watch("size",t,!0),o=e.$watch("scale",t,!0),c=0;e.moveStart=function(t){r=t.clientX,c=t.clientY,e.moving=!0},e.move=function(t){var n=t.clientX,i=t.clientY;e.viewBox.x-=(n-r)*(1/e.scale.x),e.viewBox.y-=(i-c)*(1/e.scale.y),r=n,c=i},e.moveEnd=function(){e.moving=!1},e.$on("$destroy",function(){i(),o()})}]),angular.module("FlowDesigner").controller("itemCtrl",["$scope","types","status",function(e,t,n){e.$status=n,e.$types=t,e.width=250,e.height=170,e.dragging=!1;var r,i=0;e.dragStart=function(e){r=e.clientX,i=e.clientY,e.stopPropagation()},e.drag=function(t){e.dragging=!0;var n=t.clientX,o=t.clientY;e.data.Position.X+=(n-r)*(1/e.designer.getScale().x),e.data.Position.Y+=(o-i)*(1/e.designer.getScale().y),r=n,i=o,t.stopPropagation()},e.dragEnd=function(){e.dragging=!1},e.onItemClick=function(){e.designer.selectItem(e.data)}}]).directive("designerItem",["types","status","pathService",function(e,t,n){return{restrict:"AE",require:"^designer",replace:!0,templateUrl:n+"item.tmpl.html",transclude:!0,scope:{data:"=",offsetX:"=",offsetY:"="},controller:"itemCtrl",link:function(e,n,r,i){e.data.Status=t.notrun,e.designer=i;var o=angular.element(n.children());n.replaceWith(o)}}}]).directive("itemTitle",[function(){return{restrict:"E",replace:!0,template:'<div class="font-m box-header" ng-transclude></div>',transclude:!0,link:function(){}}}]).directive("itemDescription",[function(){return{restrict:"AE",replace:!0,template:'<div class="font-xs" ng-transclude></div>',transclude:!0,link:function(){}}}]),angular.module("FlowDesigner",[]).service("pathService",[function(){var e="src/templates/";return{templatesBaseUrl:e,setPath:function(t){e=t.templatesBaseUrl}}}]),angular.module("Svg.Directive",[]).directive("ngWidth",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngWidth,function(e){t.attr("width",e)})}}}]).directive("ngHeight",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngHeight,function(e){t.attr("height",e)})}}}]).directive("ngX",["$compile",function(){return{restrict:"A",link:function(e,t,n){e.$watch(n.ngX,function(e){t.attr("x",e)})}}}]).directive("ngY",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY,function(e){t.attr("y",e)})}}}]).directive("ngCx",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngCx,function(e){t.attr("cx",e)})}}}]).directive("ngCy",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngCy,function(e){t.attr("cy",e)})}}}]).directive("ngX1",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngX1,function(e){t.attr("x1",e)})}}}]).directive("ngX2",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngX2,function(e){t.attr("x2",e)})}}}]).directive("ngY1",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY1,function(e){t.attr("y1",e)})}}}]).directive("ngY2",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngY2,function(e){t.attr("y2",e)})}}}]).directive("autoSize",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t){$(window).resize(function(){e.$apply(function(){e.size={width:t.width(),height:t.height()}})})}}}]).directive("ngViewbox",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){e.$watch(n.ngViewbox,function(e){if(e){var n=e.x+" "+e.y+" "+e.width+" "+e.height;t[0].setAttribute("viewBox",n)}},!0)}}}]).directive("textEllipsis",[function(){return{restrict:"A",replace:!0,scope:!1,link:function(e,t,n){var r=parseFloat(n.maxWidth),i=e.$eval(n.textEllipsis);if(t.text(i),t.width()>r)for(;t.width()>r;)i=i.substring(0,i.length-1),t.text(i.substring(0,i.length-1)+"...")}}}]),angular.module("Touch.Directive",[]).directive("tap",function(){return{restrict:"A",replace:!0,link:function(e,t,n){var r;t.bind("mousedown",function(){r=new Date}),t.bind("mouseup",function(t){var i=new Date;200>=i-r&&e.$apply(function(){e.$eval(n.tap,{$event:t})})}),e.$on("$destroy",function(){t.unbind("mousedown"),t.unbind("mouseup")})}}}).directive("doubleTap",function(){return{restrict:"A",replace:!0,link:function(e,t,n){t.hammer({taps:2}).bind("tap",function(t){2===t.gesture.tapCount&&e.$apply(function(){e.$eval(n.doubleTap,{$event:t})})}),e.$on("$destroy",function(){t.hammer().unbind("tap")})}}}).directive("pan",function(){return{restrict:"A",replace:!0,link:function(e,t,n){t.bind("mousedown",function(t){0===t.button&&e.$apply(function(){e.$eval(n.panBegin,{$event:t});var r=function(t){e.$apply(function(){e.$eval(n.pan,{$event:t})})};$(document).bind("mousemove",r);var i=function(t){e.$apply(function(){e.$eval(n.panRelease,{$event:t}),$(document).unbind("mousemove",r),$(document).unbind("mouseup",i)})};$(document).bind("mouseup",i)})}),e.$on("$destroy",function(){t.unbind("mousedown")})}}});
//# sourceMappingURL=data:application/json;base64,